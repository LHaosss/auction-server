// Code generated by goctl. DO NOT EDIT.

package offer_info_model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	offerInfoFieldNames          = builder.RawFieldNames(&OfferInfo{})
	offerInfoRows                = strings.Join(offerInfoFieldNames, ",")
	offerInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(offerInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	offerInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(offerInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuctionServerOfferInfoIdPrefix  = "cache:auctionServer:offerInfo:id:"
	cacheAuctionServerOfferInfoXidPrefix = "cache:auctionServer:offerInfo:xid:"
)

type (
	offerInfoModel interface {
		Insert(ctx context.Context, data *OfferInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*OfferInfo, error)
		FindOneByXid(ctx context.Context, xid sql.NullString) (*OfferInfo, error)
		Update(ctx context.Context, data *OfferInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultOfferInfoModel struct {
		sqlc.CachedConn
		table string
	}

	OfferInfo struct {
		Id         int64          `db:"id"`
		Xid        sql.NullString `db:"xid"`
		UserXid    sql.NullString `db:"user_xid"`
		AuctionXid sql.NullString `db:"auction_xid"`
		OfferPrice sql.NullInt64  `db:"offer_price"`
	}
)

func newOfferInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultOfferInfoModel {
	return &defaultOfferInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`offer_info`",
	}
}

func (m *defaultOfferInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	auctionServerOfferInfoIdKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoIdPrefix, id)
	auctionServerOfferInfoXidKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoXidPrefix, data.Xid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, auctionServerOfferInfoIdKey, auctionServerOfferInfoXidKey)
	return err
}

func (m *defaultOfferInfoModel) FindOne(ctx context.Context, id int64) (*OfferInfo, error) {
	auctionServerOfferInfoIdKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoIdPrefix, id)
	var resp OfferInfo
	err := m.QueryRowCtx(ctx, &resp, auctionServerOfferInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offerInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfferInfoModel) FindOneByXid(ctx context.Context, xid sql.NullString) (*OfferInfo, error) {
	auctionServerOfferInfoXidKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoXidPrefix, xid)
	var resp OfferInfo
	err := m.QueryRowIndexCtx(ctx, &resp, auctionServerOfferInfoXidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `xid` = ? limit 1", offerInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, xid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOfferInfoModel) Insert(ctx context.Context, data *OfferInfo) (sql.Result, error) {
	auctionServerOfferInfoIdKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoIdPrefix, data.Id)
	auctionServerOfferInfoXidKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoXidPrefix, data.Xid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, offerInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Xid, data.UserXid, data.AuctionXid, data.OfferPrice)
	}, auctionServerOfferInfoIdKey, auctionServerOfferInfoXidKey)
	return ret, err
}

func (m *defaultOfferInfoModel) Update(ctx context.Context, newData *OfferInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	auctionServerOfferInfoIdKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoIdPrefix, data.Id)
	auctionServerOfferInfoXidKey := fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoXidPrefix, data.Xid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, offerInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Xid, newData.UserXid, newData.AuctionXid, newData.OfferPrice, newData.Id)
	}, auctionServerOfferInfoIdKey, auctionServerOfferInfoXidKey)
	return err
}

func (m *defaultOfferInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuctionServerOfferInfoIdPrefix, primary)
}

func (m *defaultOfferInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", offerInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultOfferInfoModel) tableName() string {
	return m.table
}
