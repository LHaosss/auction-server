// Code generated by goctl. DO NOT EDIT.

package user_model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheAuctionServerUserIdPrefix       = "cache:auctionServer:user:id:"
	cacheAuctionServerUserUsernamePrefix = "cache:auctionServer:user:username:"
	cacheAuctionServerUserXidPrefix      = "cache:auctionServer:user:xid:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByUsername(ctx context.Context, username sql.NullString) (*User, error)
		FindOneByXid(ctx context.Context, xid string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id       int64          `db:"id"`
		Username sql.NullString `db:"username"`
		Password sql.NullString `db:"password"`
		Xid      string         `db:"xid"`
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	auctionServerUserIdKey := fmt.Sprintf("%s%v", cacheAuctionServerUserIdPrefix, id)
	auctionServerUserUsernameKey := fmt.Sprintf("%s%v", cacheAuctionServerUserUsernamePrefix, data.Username)
	auctionServerUserXidKey := fmt.Sprintf("%s%v", cacheAuctionServerUserXidPrefix, data.Xid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, auctionServerUserIdKey, auctionServerUserUsernameKey, auctionServerUserXidKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	auctionServerUserIdKey := fmt.Sprintf("%s%v", cacheAuctionServerUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, auctionServerUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username sql.NullString) (*User, error) {
	auctionServerUserUsernameKey := fmt.Sprintf("%s%v", cacheAuctionServerUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, auctionServerUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByXid(ctx context.Context, xid string) (*User, error) {
	auctionServerUserXidKey := fmt.Sprintf("%s%v", cacheAuctionServerUserXidPrefix, xid)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, auctionServerUserXidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `xid` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, xid); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	auctionServerUserIdKey := fmt.Sprintf("%s%v", cacheAuctionServerUserIdPrefix, data.Id)
	auctionServerUserUsernameKey := fmt.Sprintf("%s%v", cacheAuctionServerUserUsernamePrefix, data.Username)
	auctionServerUserXidKey := fmt.Sprintf("%s%v", cacheAuctionServerUserXidPrefix, data.Xid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Xid)
	}, auctionServerUserIdKey, auctionServerUserUsernameKey, auctionServerUserXidKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	auctionServerUserIdKey := fmt.Sprintf("%s%v", cacheAuctionServerUserIdPrefix, data.Id)
	auctionServerUserUsernameKey := fmt.Sprintf("%s%v", cacheAuctionServerUserUsernamePrefix, data.Username)
	auctionServerUserXidKey := fmt.Sprintf("%s%v", cacheAuctionServerUserXidPrefix, data.Xid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Xid, newData.Id)
	}, auctionServerUserIdKey, auctionServerUserUsernameKey, auctionServerUserXidKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAuctionServerUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
