// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auction.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auctioncenter_AuctionPost_FullMethodName  = "/pb.auctioncenter/AuctionPost"
	Auctioncenter_AuctionOffer_FullMethodName = "/pb.auctioncenter/AuctionOffer"
)

// AuctioncenterClient is the client API for Auctioncenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctioncenterClient interface {
	AuctionPost(ctx context.Context, in *AuctionPostReq, opts ...grpc.CallOption) (*AuctionPostResp, error)
	AuctionOffer(ctx context.Context, in *AuctionOfferReq, opts ...grpc.CallOption) (*AuctionOfferResp, error)
}

type auctioncenterClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctioncenterClient(cc grpc.ClientConnInterface) AuctioncenterClient {
	return &auctioncenterClient{cc}
}

func (c *auctioncenterClient) AuctionPost(ctx context.Context, in *AuctionPostReq, opts ...grpc.CallOption) (*AuctionPostResp, error) {
	out := new(AuctionPostResp)
	err := c.cc.Invoke(ctx, Auctioncenter_AuctionPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctioncenterClient) AuctionOffer(ctx context.Context, in *AuctionOfferReq, opts ...grpc.CallOption) (*AuctionOfferResp, error) {
	out := new(AuctionOfferResp)
	err := c.cc.Invoke(ctx, Auctioncenter_AuctionOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuctioncenterServer is the server API for Auctioncenter service.
// All implementations must embed UnimplementedAuctioncenterServer
// for forward compatibility
type AuctioncenterServer interface {
	AuctionPost(context.Context, *AuctionPostReq) (*AuctionPostResp, error)
	AuctionOffer(context.Context, *AuctionOfferReq) (*AuctionOfferResp, error)
	mustEmbedUnimplementedAuctioncenterServer()
}

// UnimplementedAuctioncenterServer must be embedded to have forward compatible implementations.
type UnimplementedAuctioncenterServer struct {
}

func (UnimplementedAuctioncenterServer) AuctionPost(context.Context, *AuctionPostReq) (*AuctionPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionPost not implemented")
}
func (UnimplementedAuctioncenterServer) AuctionOffer(context.Context, *AuctionOfferReq) (*AuctionOfferResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionOffer not implemented")
}
func (UnimplementedAuctioncenterServer) mustEmbedUnimplementedAuctioncenterServer() {}

// UnsafeAuctioncenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctioncenterServer will
// result in compilation errors.
type UnsafeAuctioncenterServer interface {
	mustEmbedUnimplementedAuctioncenterServer()
}

func RegisterAuctioncenterServer(s grpc.ServiceRegistrar, srv AuctioncenterServer) {
	s.RegisterService(&Auctioncenter_ServiceDesc, srv)
}

func _Auctioncenter_AuctionPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctioncenterServer).AuctionPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auctioncenter_AuctionPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctioncenterServer).AuctionPost(ctx, req.(*AuctionPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auctioncenter_AuctionOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionOfferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctioncenterServer).AuctionOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auctioncenter_AuctionOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctioncenterServer).AuctionOffer(ctx, req.(*AuctionOfferReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auctioncenter_ServiceDesc is the grpc.ServiceDesc for Auctioncenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auctioncenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.auctioncenter",
	HandlerType: (*AuctioncenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuctionPost",
			Handler:    _Auctioncenter_AuctionPost_Handler,
		},
		{
			MethodName: "AuctionOffer",
			Handler:    _Auctioncenter_AuctionOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auction.proto",
}
