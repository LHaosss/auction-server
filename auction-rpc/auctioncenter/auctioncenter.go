// Code generated by goctl. DO NOT EDIT.
// Source: auction.proto

package auctioncenter

import (
	"context"

	"auction_server/auction-rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuctionOfferReq  = pb.AuctionOfferReq
	AuctionOfferResp = pb.AuctionOfferResp
	AuctionPostReq   = pb.AuctionPostReq
	AuctionPostResp  = pb.AuctionPostResp

	Auctioncenter interface {
		AuctionPost(ctx context.Context, in *AuctionPostReq, opts ...grpc.CallOption) (*AuctionPostResp, error)
		AuctionOffer(ctx context.Context, in *AuctionOfferReq, opts ...grpc.CallOption) (*AuctionOfferResp, error)
	}

	defaultAuctioncenter struct {
		cli zrpc.Client
	}
)

func NewAuctioncenter(cli zrpc.Client) Auctioncenter {
	return &defaultAuctioncenter{
		cli: cli,
	}
}

func (m *defaultAuctioncenter) AuctionPost(ctx context.Context, in *AuctionPostReq, opts ...grpc.CallOption) (*AuctionPostResp, error) {
	client := pb.NewAuctioncenterClient(m.cli.Conn())
	return client.AuctionPost(ctx, in, opts...)
}

func (m *defaultAuctioncenter) AuctionOffer(ctx context.Context, in *AuctionOfferReq, opts ...grpc.CallOption) (*AuctionOfferResp, error) {
	client := pb.NewAuctioncenterClient(m.cli.Conn())
	return client.AuctionOffer(ctx, in, opts...)
}
